{"version":3,"sources":["Map.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["names","data","features","map","d","properties","name","DEFAULT_FILL","WRONG_FILL","CORRECT_FILL","shuffle","a","i","length","j","Math","floor","random","Map","useState","missed","setMissed","neighbToFind","setNeighb","rootRef","useMemo","createRef","svg","useRef","nextNeighb","slice","alert","useEffect","eventHandler","d3","filter","dd","each","el","this","style","insert","attr","text","misses","concat","on","useLayoutEffect","ref","current","append","projection","geoMercator","scale","translate","precision","path","geoPath","bounds","xScale","abs","yScale","transl","selectAll","enter","id","width","padding","margin","type","onClick","float","JSON","stringify","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.700e6a73.chunk.js","sourcesContent":["import * as d3 from 'd3';\nimport { Selection } from 'd3';\nimport { geoMercator, geoPath } from 'd3-geo';\nimport React, { useEffect, createRef, useState, useLayoutEffect, useRef, useMemo } from 'react';\nimport data from './geojson.json';\n\nlet names = data.features.map((d) => d.properties.name);\n\nconst DEFAULT_FILL = 'rgb(175, 157, 150)';\nconst WRONG_FILL = 'red';\nconst CORRECT_FILL = 'green';\n\nfunction shuffle(a: string[]): string[] {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nshuffle(names);\n\nexport default function Map(): JSX.Element {\n  const [missed, setMissed] = useState([]);\n  const [neighbToFind, setNeighb] = useState();\n  const rootRef = useMemo(() => createRef<HTMLDivElement>(), []);\n  let svg = useRef<Selection<SVGSVGElement, unknown, null, undefined>>();\n\n  function startGame() {\n    names = shuffle(data.features.map((d) => d.properties.name));\n    setMissed([]);\n    d3.selectAll('svg path').style(\"fill\", DEFAULT_FILL).style(\"stroke\", \"#ffffff\");\n    nextNeighb();\n  }\n\n  function nextNeighb() {\n    setNeighb(names[0]);\n    names = names.slice(1);\n    if (!names.length) {\n      alert('game done')\n    }\n  }\n\n  function skip() {\n    setNeighb(names[0]);\n    names = names.slice(1).concat(neighbToFind);\n  }\n\n  useEffect(\n    () => {\n      if (!neighbToFind) {\n        return;\n      }\n      function eventHandler(d: any) {\n        if (d.properties.name === neighbToFind) {\n          d3.selectAll('svg path').filter((dd: any) => d.properties.name === dd.properties.name)\n            .each(function(el){\n              d3.select(this).style('fill', CORRECT_FILL).style('opacity', 1);\n            })\n        } else {\n          d3.selectAll('svg path').filter((dd: any) => neighbToFind === dd.properties.name)\n            .each(function(el: any){\n              d3.select(this).style('fill', WRONG_FILL).style('opacity', 1);\n              d3.select(this).insert('text')\n                .attr('dy', '0.5em')\n                .text(el.properties.name);\n            })\n          setMissed((misses) => misses.concat(neighbToFind));\n        }\n        nextNeighb();\n      }\n      d3.selectAll('path').on('click', eventHandler).on('touchstart', eventHandler)\n    },\n    [neighbToFind]\n  )\n\n  useLayoutEffect(\n    () => {\n      \n      const ref = rootRef.current;\n      if (!ref) {\n        return;\n      }\n\n      var width = 600, height = 600;\n      svg.current = d3.select(ref).append(\"svg\").attr(\"width\", width).attr(\"height\", height);\n\n      var projection = geoMercator().scale(1).translate([0, 0]).precision(0);\n      var path = geoPath().projection(projection);\n      var bounds = path.bounds(data as any);\n\n      let xScale = width / Math.abs(bounds[1][0] - bounds[0][0]);\n      let yScale = height / Math.abs(bounds[1][1] - bounds[0][1]);\n      let scale = xScale < yScale ? xScale : yScale;\n\n      var transl: [number, number] = [(width - scale * (bounds[1][0] + bounds[0][0])) / 2, (height - scale * (bounds[1][1] + bounds[0][1])) / 2];\n      projection.scale(scale).translate(transl);\n\n      svg.current.selectAll(\"path\")\n        .data(data.features)\n        .enter()\n        .append(\"path\")\n        .attr(\"d\", path as any)\n        .attr('data-id', (d: any) => d.id)\n        .attr('data-name', (d: { properties: { name: string; }; }) => d.properties.name)\n        .attr('pointer-events', 'all')\n        .style(\"fill\", DEFAULT_FILL).style(\"stroke\", \"#ffffff\");\n\n      svg.current.selectAll('path').on('mouseover', function() {\n        d3.select(this).style('opacity', 0.5);\n      });\n      svg.current.selectAll('path').on('mouseleave', function() {\n        d3.select(this).style('opacity', 1);\n      })\n    },\n    [rootRef]\n  );\n  return (\n    <div style={{width: '900px', padding: '30px', margin: 'auto auto'}}>\n      <button type=\"button\" onClick={startGame}>Start New Game</button>\n      { neighbToFind && <div>\n        <div><p>Can you find and click on {neighbToFind}?</p></div>\n        <div><button type=\"button\" onClick={skip}>Skip and come back later</button></div>\n        </div>}\n      <aside style={{float: 'right'}}>\n        <h4>Missed Neighbs</h4>\n        <pre>{JSON.stringify(missed, null, 2)}</pre>\n      </aside>\n      <div ref={rootRef}/>\n    </div>\n  );\n}","import React from 'react';\nimport './App.css';\nimport Map from './Map';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div>\n        <Map />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}